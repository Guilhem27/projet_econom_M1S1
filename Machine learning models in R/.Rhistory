library(rlang)
detach("package:rlang", unload = TRUE)
install.packages("tidyverse")
install.packages("tidyquant")
library(tidyverse)
library(tidyquant)
# Set random seed for reproduc
library(tidyverse)
library(tidyquant)
# Set random seed for reproduc
set.seed(301)
ticker_names_table <-htmltab::htmltab("https://en.wikipedia.org/w/index.php?title=S%26P/TSX_Composite_Index", 2)
library(htmltools)
set.seed(301)
ticker_names_table <-htmltab::htmltab("https://en.wikipedia.org/w/index.php?title=S%26P/TSX_Composite_Index", 2)
install.packages("htmlTable")
library(htmlTable)
ticker_names <- as.vector(ticker_names_table %>% select(Symbol))
library(tidyverse)
library(tidyquant)
set.seed(301)
ticker_names_table <-htmltab::htmltab("https://en.wikipedia.org/w/index.php?title=S%26P/TSX_Composite_Index", 2)
install.packages("htmltab")
install.packages("rvest")
# Our first step is to parse an HTML table hosted on Wikipedia. We are interested in table 2, so we parse
# the URL and table number to htmltab function, which requests and downloads HTML data. You could
# potentially select any Index of choice and provide the corresponding URL. just be sure to parse the
# correct table number on the second argument of the function.
library(rvest)
url <- "https://en.wikipedia.org/wiki/S%26P/TSX_Composite_Index"
page <- read_html(url)
View(page)
# Extract the second table
ticker_names_table <- page %>%
html_node("table:nth-of-type(2)") %>%
html_table()
# View the table
print(ticker_names_table)
ticker_names_table <-htmltab::htmltab("https://en.wikipedia.org/w/index.php?title=S%26P/TSX_Composite_Index", 2)
# Get all tables from the page
tables <- page %>% html_nodes("table")
# Extract the second table (index 2)
ticker_names_table <- tables[[2]] %>% html_table()
# View the table
print(ticker_names_table)
# Get all tables from the page
tables <- page %>% html_nodes("table")
# Extract the second table (index 2)
ticker_names_table <- tables[[3]] %>% html_table()
View(tables)
# View the table
print(ticker_names_table)
View(ticker_names_table)
# Extract the second table (index 2)
ticker_names_table <- tables[[4]] %>% html_table()
View(ticker_names_table)
ticker_names <- as.vector(ticker_names_table %>% select(Ticker))
ticker_transform_names <-  gsub("[[:punct:]]", "-", ticker_names$Ticker)
ticker_transform_names <- as.vector(stringi::stri_paste(ticker_transform_names, ".TO"))
period_returns_TSX <-  ticker_transform_names %>%
tq_get(get  = "stock.prices",
from = "2021-07-01",
to   = "2021-11-10") %>%
group_by(symbol) %>% # allows us to perform the periodReturn per Ticker and not the whole dataset
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily",
type = "log",
col_rename = "Ra") # Ra stands for Returns group a
View(period_returns_TSX)
period_returns_TSX <-  ticker_transform_names %>%
tq_get(get  = "stock.prices",
from = "2021-07-01",
to   = "2021-11-10") %>%
group_by(symbol) %>% # allows us to perform the periodReturn per Ticker and not the whole dataset
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily",
type = "log",
col_rename = "Ra") # Ra stands for Returns group a
period_returns_XLK <- "XLK" %>%
tq_get(get  = "stock.prices",
from = "2021-07-01",
to   = "2021-11-10") %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
type = "log",
period     = "daily",
col_rename = "Rb") # Returns for comparison group b
RaRb_preselection <- left_join(period_returns_TSX,
period_returns_XLK,
by = "date") %>% group_by(symbol)
View(RaRb_preselection)
View(period_returns_XLK)
period_returns_TSX <-  ticker_transform_names %>%
tq_get(get  = "stock.prices",
from = "2021-07-06",
to   = "2021-11-10") %>%
group_by(symbol) %>% # allows us to perform the periodReturn per Ticker and not the whole dataset
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily",
type = "log",
col_rename = "Ra") # Ra stands for Returns group a
period_returns_XLK <- "XLK" %>%
tq_get(get  = "stock.prices",
from = "2021-07-06",
to   = "2021-11-10") %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
type = "log",
period     = "daily",
col_rename = "Rb") # Returns for comparison group b
RaRb_preselection <- left_join(period_returns_TSX,
period_returns_XLK,
by = "date") %>% group_by(symbol)
View(RaRb_preselection)
View(RaRb_preselection)
View(RaRb_preselection)
CAPM_stock <- RaRb_preselection %>%
tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
View(CAPM_stock)
stock_top_percentile <- CAPM_stock %>% filter(AnnualizedAlpha > quantile(CAPM_stock$AnnualizedAlpha , .80))
View(stock_top_percentile)
stock_top_percentile <- CAPM_stock %>% filter(AnnualizedAlpha > quantile(CAPM_stock$AnnualizedAlpha , .80))
quintile_ticker_names <- stock_top_percentile$symbol
stock_returns_quintile <- period_returns_TSX %>%  filter(symbol %in% quintile_ticker_names)
View(stock_returns_quintile)
# We can now proceed to create portfolios based on our top performing tickers. We will firstly show how this
# is achieved for a single case and then show the generalized method. Unfortunately, the tq_portfoilio
# function does not have a an argument to select only a subset of values. For this reason we have to create
# a vector with random weights, and have a weight of 0 for the tickers we do not want to include in our
# portfolio.
set.seed(4)
weights <- c(1:100)
random_weights <- sample(weights, size=length(quintile_ticker_names), replace=TRUE)
index_for_zeroes <- sample(c(1:length(random_weights)), round(length(quintile_ticker_names)*.78, 0)) # 37 out of 47 Tickers will be 0
random_weights[index_for_zeroes]<-0 # Insert zeroes
weights_mapping_single <- tibble(
symbols = quintile_ticker_names,
weights = random_weights
) %>%
mutate(weights = weights / sum(weights)) # We do want our weights to sum up to one, this will most likely
View(weights_mapping_single)
View(weights_mapping_single)
portfolio_returns_monthly <- stock_returns_quintile %>%
tq_portfolio(assets_col  = symbol,
returns_col = Ra,
weights     = weights_mapping_single,
col_rename  = "Ra")
View(stock_returns_quintile)
View(portfolio_returns_monthly)
RaRb_single_portfolio <- left_join(portfolio_returns_monthly,
period_returns_XLK,
by = "date")
View(RaRb_single_portfolio)
View(RaRb_single_portfolio)
RaRb_single_portfolio %>%
tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
RaRb_single_portfolio %>%
tq_performance(Ra = Ra, Rb = Rb, performance_fun = InformationRatio)
portfolio_returns_monthly %>%
ggplot(aes(x = date, y = Ra)) +
geom_bar(stat = "identity", fill = palette_light()[[1]]) +
labs(title = "Portfolio Returns",
x = "", y = "Monthly Returns") +
geom_smooth(method = "lm") +
theme_tq() +
scale_color_tq() +
scale_y_continuous(labels = scales::percent)
symbol_a = c(rep('PRT', length(portfolio_returns_monthly$Ra)))
portfolio_asset_name = cbind(portfolio_returns_monthly, symbol_a)
portfolio_growth_single <- portfolio_asset_name %>%
tq_portfolio(assets_col   = symbol_a,
returns_col  = Ra,
col_rename   = "investment.growth",
wealth.index = TRUE) %>%
mutate(investment.growth = investment.growth * 10000)
View(portfolio_asset_name)
View(portfolio_growth_single)
symbol_b = c(rep('XLK', length(period_returns_XLK$Rb))) # tq_portfolio does require us to parse assets_col
# so we need to create a vector with an identifier of choice and bind it to the tibble which contains log
#returns.
XLK_asset_name = cbind(period_returns_XLK, symbol_b)
View(XLK_asset_name)
portfolio_growth_XLK <- XLK_asset_name %>%
tq_portfolio(assets_col   = symbol_b,
returns_col  = Rb,
col_rename   = "investment.growth",
wealth.index = TRUE) %>%
mutate(investment.growth = investment.growth * 10000)
View(portfolio_growth_XLK)
View(portfolio_growth_single)
ggplot() +
geom_line(data = portfolio_growth_single, aes(x = date, y = investment.growth), color = "blue") +
geom_line(data = portfolio_growth_XLK, aes(x = date, y = investment.growth), color = "red") +
labs(title = "Portfolio Growth", x = "", y = "Portfolio Value") +
theme_tq() +
scale_color_tq() +
scale_y_continuous(labels = scales::dollar)
set.seed(20)
repetitions <- 100
stock_returns_quintile <- stock_returns_quintile %>%
tq_repeat_df(n = repetitions)
View(stock_returns_quintile)
random_weights_multiple <- sample(weights, length(quintile_ticker_names)*repetitions, replace=TRUE)
index_zeroes_multiple <- sample(c(1:length(random_weights_multiple)), round(length(random_weights_multiple)*.75, 0))
random_weights_multiple[index_zeroes_multiple]<-0
weights_table <-  tibble(quintile_ticker_names) %>%
tq_repeat_df(n = repetitions) %>%
bind_cols(tibble(random_weights_multiple)) %>%
group_by(portfolio) %>%
mutate(random_weights_multiple = random_weights_multiple / sum(random_weights_multiple))
portfolio_returns_multi <- stock_returns_quintile %>%
tq_portfolio(assets_col  = symbol,
returns_col = Ra,
weights     = weights_table,
col_rename  = "Ra")
View(weights_table)
View(weights_mapping_single)
View(portfolio_returns_multi)
RaRb_multiple_portfolios <- left_join(portfolio_returns_multi,
period_returns_XLK,
by = "date")
CAPM_multiple_portfolios <- RaRb_multiple_portfolios %>%
tq_performance(Ra = Ra, Rb = Rb, performance_fun = table.CAPM)
View(CAPM_multiple_portfolios)
annualized_returns <- RaRb_multiple_portfolios %>%
tq_performance(Ra = Ra, Rb = NULL, performance_fun = table.AnnualizedReturns)
portfolio_growth_monthly_multi <- stock_returns_quintile %>%
tq_portfolio(assets_col   = symbol,
returns_col  = Ra,
weights      = weights_table,
col_rename   = "investment.growth",
wealth.index = TRUE) %>%
mutate(investment.growth = investment.growth * 10000)
View(annualized_returns)
View(portfolio_growth_monthly_multi)
portfolio_growth_monthly_multi %>%
ggplot(aes(x = date, y = investment.growth, color = factor(portfolio), legend.position = "none")) +
geom_line(size = 2, legend.position = "none") +
labs(title = "Randomly Optimized Portfolios",
subtitle = "Comparing Multiple Portfolios",
x = "", y = "Portfolio Value",
color = "Portfolio",
legend.position = "none") +
geom_smooth(method = "loess") +
theme_tq() +
scale_color_tq() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::dollar)
options(digits=2)
keymatrix <- weights_table %>% spread(key = portfolio, value = random_weights_multiple)
View(keymatrix)
View(CAPM_multiple_portfolios)
View(keymatrix)
rm(list=ls())
set.seed(1)
e <- rnorm(200)         # Génère 200 réalisations de variables aléatoires normales (bruit blanc).
e <- as.ts(e)           # Convertit en série temporelle.
plot(e, main='BB', col='red')
plot(e, main='BB', col='red')
par(mfrow=c(1,2))
acf(e, lag.max=20)
pacf(e, lag.max=20)
par(mfrow=c(1,1))
# simulation d'un processus AR(1)
x <- rep(0,200)
x <- as.ts(x)
for (t n 2:200){
plot(x, col='blue'
x <- as.ts(x)
for (t in 2:200){
x[t] <- 0.8*x[t-1] + e[t]
}
plot(x, col='blue')
par(mfrow=c(1,2))
acf(e, lag.max=20)         # Calcule et trace la fonction d'autocorrélation (ACF) de la série temporelle 'e', jusqu'à 20 retards (lags).
pacf(e, lag.max=20)
par(mfrow=c(1,1))
# Simulation d'un processus AR(2)
x <- as.ts(rep(0,200))
for (t in 3:200){         # Simulation d'un processus AR(2).
x[t] <- -0.5*x[t-1] -0.4*x[t-2] + e[t]  # Processus AR(2) : dépendance des deux états précédents.
}
plot(x,main="simulation d'un AR(2)", xlab='temps',ylab='x')
par(mfrow=c(1,2))
acf(x)                     # ACF du processus AR(2).
pacf(x)                    # PACF du processus AR(2).
par(mfrow=c(1,1))
# Simulation d'un processus MA(1)
x <- as.ts(rep(0,200))
for (t in 2:200){         # Simulation d'un processus MA(1).
x[t] <- e[t] + 0.8*e[t-1]  # Processus MA(1) : dépendance du bruit actuel et précédent.
}
plot(x,main="simulation d'un MA(1)", xlab='temps',ylab='x')
par(mfrow=c(1,2))
acf(x)                     # ACF du processus MA(1).
pacf(x)                    # PACF du processus MA(1).
par(mfrow=c(1,1))
# Simulation d'un processus ARMA(1,1)
x <- as.ts(rep(0,200))
for (t in 2:200){         # Simulation d'un processus ARMA(1,1).
x[t] <- 0.9*x[t-1] + e[t] + 0.8*e[t-1]  # Processus ARMA(1,1).
}
plot(x,main="simulation d'un ARMA(1,1)", xlab='temps',ylab='x')
par(mfrow=c(1,2))
rm(list=ls())  # on vide l'environnement global
e <- rnorm(200)            # Génère 200 réalisations d'une variable aléatoire suivant une loi normale standard (moyenne 0, écart-type 1), représentant ici un bruit blanc.
rm(list=ls())  # on vide l'environnement global
library(readxl)
library(urca)
# Importation de la série (date d'importation oct 2023)
base <- read_excel('base_pibus.xlsx')
# Importation de la série (date d'importation oct 2023)
base <- read_excel('base_pibus.xlsx')
# Importation de la série (date d'importation oct 2023)
base <- read_excel('base_pibus.xlsx')
# Importation de la série (date d'importation oct 2023)
base <- read_excel('base_pibUS.xlsx')
